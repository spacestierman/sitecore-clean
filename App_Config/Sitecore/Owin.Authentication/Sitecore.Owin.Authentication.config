<?xml version="1.0" encoding="utf-8"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore role:require="Standalone or ContentDelivery or ContentManagement">
        <settings>
            <!--  FEDERATED AUTHENTICATION ENABLED
                  Determines if federated authentication is enabled.
                  Default value: false. -->
            <setting name="FederatedAuthentication.Enabled" value="false" />

            <setting name="FederatedAuthentication.IdentityProcessingPathPrefix" value="/identity/" />

            <!--  CACHING OWIN TRANSFORMED IDENTITIES CACHE SIZE
                  Determines the size of the TransformedIdentitiesCacheSize cache, which improves
                  the performance of the Bearer Token authentication.
                  Specify the value in bytes or append the value with KB, MB or GB
                  Default value: 50MB-->
            <setting name="Caching.Owin.TransformedIdentitiesCacheSize" value="50MB" />
        </settings>

        <services>
            <configurator type="Sitecore.Owin.Authentication.Infrastructure.ServicesConfigurator, Sitecore.Owin.Authentication" />
            <configurator type="Sitecore.Owin.Authentication.Client.Infrastructure.ServicesConfigurator, Sitecore.Owin.Authentication.Client" />
        </services>

        <pipelines>
            <httpRequestBegin>
                <processor type="Sitecore.Pipelines.HttpRequest.IgnoreList, Sitecore.Kernel">
                    <prefixes>
                        <prefix name="identityProcessing">/identity/</prefix>
                    </prefixes>
                </processor>
            </httpRequestBegin>
            <owin.initialize>
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.DefineOwinAuthenticationState, Sitecore.Owin.Authentication"
                           resolve="true" patch:after="processor[@type='Sitecore.Owin.Pipelines.Initialize.SetLoggerFactory, Sitecore.Owin']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.ValidateFederatedAuthenticationState, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.InjectOwinDependencies, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.CookieAuthentication, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.PreviewCookieAuthentication, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.ExternalCookieAuthentication, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.AddIdentityProviders, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.WindowsAzureActiveDirectoryBearerAuthentication, Sitecore.Owin.Authentication"
                           resolve="true" patch:before="processor[@method='Authenticate']">
                    <IdentityProviderName></IdentityProviderName>
                    <ApplicationId></ApplicationId>
                    <TenantId></TenantId>
                </processor>
                <processor type="Sitecore.Owin.Authentication.Pipelines.Initialize.HandleLoginLink, Sitecore.Owin.Authentication" resolve="true" />
            </owin.initialize>

            <owin.identityProviders help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.IdentityProviders.IdentityProvidersProcessor">
                <!--Place here the provider initialize class. You can use the custom config file in Include folder - just create new one or use existed.
                For example:
                <processor type="Sitecore.Owin.Authentication.Samples.AzureAd.Pipelines.IdentityProviders.AzureAd, Sitecore.Owin.Authentication.Samples.AzureAd" resolve="true" />-->
            </owin.identityProviders>

            <owin.cookieAuthentication.validateIdentity help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateIdentityProcessor">
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ValidateForUnresolvedSiteContext, Sitecore.Owin.Authentication" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.CheckIdentityProvider, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.ResolveToDefaultAuthenticationSourceOnly, Sitecore.Owin.Authentication">
                    <paths hint="list">
                    </paths>
                </processor>
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ValidateIdentity.CheckSiteMode, Sitecore.Owin.Authentication" resolve="true" />
            </owin.cookieAuthentication.validateIdentity>

            <owin.cookieAuthentication.signIn help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.SignInProcessor">
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.RemoveTicket, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.ResolveUser, Sitecore.Owin.Authentication" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.ClearCache, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.UpdateUserProperties, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignIn.CheckClientUser, Sitecore.Owin.Authentication" />
            </owin.cookieAuthentication.signIn>

            <owin.cookieAuthentication.signedIn help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.SignedInProcessor">
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CleanupUserProfile, Sitecore.Owin.Authentication" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.GetStartUrl, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.CreateTicket, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignedIn.ApplyRedirect, Sitecore.Owin.Authentication" resolve="true" />
            </owin.cookieAuthentication.signedIn>

            <owin.cookieAuthentication.applyRedirect help="Processors should derive from Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.ApplyRedirectProcessor">
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.ApplyRedirect.GoToLoginPage, Sitecore.Owin.Authentication" />
            </owin.cookieAuthentication.applyRedirect>

            <owin.cookieAuthentication.signOut>
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.CheckUser, Sitecore.Owin.Authentication" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.ClearRecentDocuments, Sitecore.Owin.Authentication" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.RemoveTicket, Sitecore.Owin.Authentication" resolve="true" />
                <processor type="Sitecore.Owin.Authentication.Pipelines.CookieAuthentication.SignOut.ClearCache, Sitecore.Owin.Authentication" resolve="true" />
            </owin.cookieAuthentication.signOut>

            <getSignInUrlInfo>
                <processor type="Sitecore.Owin.Authentication.Pipelines.GetSignInUrlInfo.GetExternalSignInUrlInfo, Sitecore.Owin.Authentication" resolve="true" />
            </getSignInUrlInfo>
        </pipelines>

        <federatedAuthentication type="Sitecore.Owin.Authentication.Configuration.FederatedAuthenticationConfiguration, Sitecore.Owin.Authentication">
            <identityProvidersPerSites hint="list:AddIdentityProvidersPerSites">
                <!--To add a providers per sites configuration you can use the custom config file in Include folder - just create new one or use existed. 
                Under configuration/sitecore/federatedAuthentication/identityProvidersPerSites create a new node with name mapEntry. Fill name, type attributes. 
                The value of the name attribute should be unique for each entry.
                Under created node fill child nodes: sites (list of sites where the provider(s) will work), identityProviders (list of providers), externalUserBuilder. 
                An example of map entry where the AzureAd provider could be used with shell, admin and website sites:-->
                <!--
                <mapEntry name="0" type="Sitecore.Owin.Authentication.Collections.IdentityProvidersPerSitesMapEntry, Sitecore.Owin.Authentication">
                  <sites hint="list">
                    <site>shell</site>
                    <site>admin</site>
                    <site>website</site>
                  </sites>
                  <identityProviders hint="list:AddIdentityProvider">
                    <identityProvider ref="federatedAuthentication/identityProviders/identityProvider[@id='AzureAd']" />
                  </identityProviders>
                  <externalUserBuilder type="Sitecore.Owin.Authentication.Services.DefaultExternalUserBuilder, Sitecore.Owin.Authentication">
                    <param desc="isPersistentUser">true</param>
                  </externalUserBuilder>
                </mapEntry>
                -->
                <!--See below how to add a provider.-->
            </identityProvidersPerSites>

            <identityProviders hint="list:AddIdentityProvider">
                <!--To add a provider you can use the custom config file in Include folder - just create new one or use existed. 
                Under configuration/sitecore/federatedAuthentication/identityProviders create a new node with name identityProvider. Fill id, type attributes. 
                Under created node fill child nodes: param, caption, domain, transformations. 
                About transformations: because of the need to have idp claim it is recommended to apply setIdpClaim transformation and then custom one(s).
                An example of provider is placed below:-->
                <!--<identityProvider id="AzureAd" type="Sitecore.Owin.Authentication.Configuration.DefaultIdentityProvider, Sitecore.Owin.Authentication">
                    <param desc="name">$(id)</param>
                    <param desc="domainManager" type="Sitecore.Abstractions.BaseDomainManager" resolve="true" />
                    <caption>Log in with Microsoft Azure</caption>
                    <icon>/sitecore/shell/themes/standard/Custom/24x24/msazure.png</icon>
                    <domain>sitecore</domain>
                    <transformations hint="list:AddTransformation">
                        <transformation type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
                            <sources hint="raw:AddSource">
                                <claim name="groups" value="f04b11c5-323f-41e7-ab2b-d70cefb4e8d0" />
                            </sources>
                            <targets hint="raw:AddTarget">
                                <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" value="Sitecore\Developer" />
                            </targets>
                            <keepSource>true</keepSource>
                        </transformation>
                    </transformations>
                </identityProvider>-->
                <!--Here is presented the provider with id=AzureAd. It has Default tranformation and specific for this provider transformation.
                Note: you must have the transformation in config with specific key otherwise the instance will fail. 
                Regarding the example the transformation with the key=AzureAd should be in the config. See below how to add transformation.-->
            </identityProviders>

            <!--  List of all shared transformations-->
            <sharedTransformations hint="list:AddSharedClaimsTransformation">
                <!--Adds idp claim to identity. Every provider should reference to it-->
                <setIdpClaim name="setIdpClaim" type="Sitecore.Owin.Authentication.Services.SetIdpClaimTransform, Sitecore.Owin.Authentication"/>
                <!--To add a transofrmation you can use the custom config file in Include folder - just create new one or use existed. 
                Under configuration/sitecore/federatedAuthentication/sharedTransformations create a new node with appropriate node name. E.g. "<someCustomTransform>" 
                and set key attribute with uniq id for transformation.
                If you use DefaultTransformation so under created node fill child nodes: sources - list of claims in the identity which should be transformed, targets - list of claims which should be added to the identity. 
                An example of transformation is placed below:-->
                <!--
                <someCustomTransform1 name="someCustomTransform1" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
                  <sources hint="raw:AddSource">
                    <claim name="groups" />
                  </sources>
                  <targets hint="raw:AddTarget">
                    <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" />
                  </targets>
                  <keepSource>true</keepSource>
                </someCustomTransform1>
                <someCustomTransform2 name="someCustomTransform2" type="Sitecore.Owin.Authentication.Services.DefaultTransformation, Sitecore.Owin.Authentication">
                  <sources hint="raw:AddSource">
                    <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" value="f04b11c5-323f-41e7-ab2b-d70cefb4e8d0" />
                  </sources>
                  <targets hint="raw:AddTarget">
                    <claim name="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" value="Sitecore\Developer" />
                  </targets>
                  <keepSource>true</keepSource>
                </someCustomTransform2>
                -->
                <!--There are two transformations in the example: first of them is renaming claims with name=gropus to
                claims with name=http://schemas.microsoft.com/ws/2008/06/identity/claims/role. 
                Second one is transforming azure group with f04b11c5-323f-41e7-ab2b-d70cefb4e8d0 to Sitecore\Developer sitecore role.
                For claim roles is used http://schemas.microsoft.com/ws/2008/06/identity/claims/role claim name. Transform role claims using this name if you want to use roles.-->
            </sharedTransformations>

            <propertyInitializer type="Sitecore.Owin.Authentication.Services.PropertyInitializer, Sitecore.Owin.Authentication">
                <maps hint="list">
                    <!--To add a property mapping you can use the custom config file in Include folder - just create new one or use existed. 
                Under configuration/sitecore/federatedAuthentication/propertyInitializer/maps create a new node with name map. 
                Fill name, type attributes. The value of the name attribute should be unique for each mapping.
                Under created node fill child nodes: source - with claim name which should be mapped, target - name of the property to which the source claim should be mapped. 
                The mappings will affect all identities from all providers. 
                An example of propery mapping is placed below:-->
                    <!--
                <map name="Emailaddress to email" type="Sitecore.Owin.Authentication.Services.DefaultClaimToPropertyMapper, Sitecore.Owin.Authentication" resolve="true">
                  <data hint="raw:AddData">
                    <source name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress" />
                    <target name="Email" />
                  </data>
                </map>
                -->
                    <!--Here is presented the mapping with name=email to Email property. 
                The value of the claim with name=http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress will be mapped to Email property-->
                </maps>
            </propertyInitializer>
        </federatedAuthentication>
    </sitecore>
</configuration>