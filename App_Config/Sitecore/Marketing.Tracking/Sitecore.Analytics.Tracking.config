<?xml version="1.0" encoding="utf-8"?>

<!--

Purpose: This include file configures the tracking subsystem of the Sitecore Experience Database (xDB).
The tracking subsystem is responsible for tracking of online visitors. The system tracks personalization, goals,
campaigns, profile values, patterns, multivariate tests, etc.

If you want to disable this functionality and prevent online tracking of visitors, you can rename this config file
so that it has a ".disabled" extension.

-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore role:require="Standalone or ContentDelivery or ContentManagement">
        <settings>
            <!--  ANALYTICS AUTO DETECT BOTS
            Enable auto detection of bots.
            Default: true
      -->
            <setting name="Analytics.AutoDetectBots" value="true" />

            <!--  ANALYTICS CAMPAIGN QUERY STRING KEY
            Specifies the key for triggering campaigns on the query string.
            Default: sc_camp
      -->
            <setting name="Analytics.CampaignQueryStringKey" value="sc_camp" />

            <!--  ANALYTICS CLUSTER NAME
            Domain name of the web cluster this instance belongs to.
            Default: default-cd-cluster
      -->
            <setting name="Analytics.ClusterName" value="default-cd-cluster" />
            <setting name="Analytics.ClusterName" role:require="ContentManagement">
                <patch:attribute name="value"></patch:attribute>
            </setting>

            <!--  ANALYTICS CONTACT MAXIMUM INTERACTIONS 
            Maximum number of interactions in contact history that can be loaded
            by personalization components on website pages.
            Default: 25
      -->
            <setting name="Analytics.ContactHistory.MaxInteractions" value="25" />

            <!--  ANALYTICS EVENT QUERY STRING KEY
            Specifies the key for triggering events on the query string.
            Default: sc_trk
      -->
            <setting name="Analytics.EventQueryStringKey" value="sc_trk" />

            <!--  ANALYTICS FORWARDED REQUEST HTTP HEADER
            Specifies the name of an HTTP header variable containing the IP address of the webclient.
            Only for use behind load-balancers that mask web client IP addresses from webservers.
            IMPORTANT: If this setting is used incorrectly, it allows IP address spoofing.
            Typical values are "X-Forwarded-For" and "X-Real-IP".
            Default value: "" (disabled)
      -->
            <setting name="Analytics.ForwardedRequestHttpHeader" value="" />

            <!--  ANALYTICS HOST NAME
            Global domain name of the Sitecore website. 
            Default: <None>
      -->
            <setting name="Analytics.HostName" value="" />

            <!--  ANALYTICS LOG LEVEL
            Determines which level of log errors are also logged in Analytics.
            Possible values are: None, Debug, Information, Warning, Error, and Fatal.
            Default: Error
      -->
            <setting name="Analytics.LogLevel" value="Error" />

            <!--  ANALYTICS LONG RUNNING PAGE REQUEST
            Defines the threshold for long running pages in milliseconds.
            Default: 5000
      -->
            <setting name="Analytics.LongRunningRequest" value="5000" />

            <!--  ANALYTICS PATTERNS MINIMAL PROFILE SCORE COUNT
            Specifies the minimum number of content items with profile values that must be requested before Sitecore
            maps the contact's accumulated score to a pattern card.
            Default: 3
      -->
            <setting name="Analytics.Patterns.MinimalProfileScoreCount" value="3" />

            <!--  ANALYTICS PERFORM LOOKUP
            Determines if this server performs the lookups (DNS and URLs). Only one server should
            be responsible for performning the lookup.
            Default: true
      -->
            <setting name="Analytics.PerformLookup" value="true" />

            <!--  ANALYTICS - REDACT IP ADDRESS
            Determines if the IP addresses that initiated the interaction are redacted when writing to the database.
            Note: IP addresses are hashed by default. Setting this value to true removes your ability to determine the actual IP address that initiated the interaction.
            When the setting is enabled, the database stores an empty IP address (0.0.0.0) instead of the actual IP address.
            Default value: false
      -->
            <setting name="Analytics.RedactIpAddress" value="false" />

            <!--  ANALYTICS ROBOTS IGNORE ROBOTS
            Ignore requests and do not write information to the Analytics database when the visitor 
            classification identifies the visitor as a robot.
            Default: true
      -->
            <setting name="Analytics.Robots.IgnoreRobots" value="true" />

            <!--  ANALYTICS ROBOTS SESSION TIMEOUT
            The ASP.NET Session Timeout for auto detected robots. 
            When the automatic robot detection identifies a session as being a robot, the ASP.NET
            Session Timeout is set to this value (in minutes).
            Default: 1
      -->
            <setting name="Analytics.Robots.SessionTimeout" value="1" />

            <!--  ANALYTICS SAMPLING PERCENTAGE
            Specifies the percentage of sessions that analytics data should be collected for.
            Default: 100 (collect data for all sessions)
      -->
            <setting name="Analytics.Sampling.Percentage" value="100" />

            <!--  ANALYTICS SUPPRESS TRACKING INITIALIZATION EXCEPTIONS
            Specifies whether exceptions thrown during tracking initialization should be suppressed.
            Default: true
      -->
            <setting name="Analytics.SuppressTrackingInitializationExceptions" value="true" />

            <!--  ANALYTICS TRACKING COOKIE LIFETIME
            Specifies the lifetime of the tracking cookie in hours.
            Default: 87600 (10 years)
      -->
            <setting name="Analytics.CookieLifetime" value="87600" />

            <!--  ANALYTICS USE SUBMIT QUEUE
            Specifies if the submit queue should be used when the contact or session submit operations cannot access the database.
            If set to true, the contact or session is queued until the database is back up (see the <submitQueue> section).
            Default: true
      -->
            <setting name="Analytics.UseSubmitQueue" value="true" />

            <!--  MAXMIND FORMAT
            Format of the return value from MaxMind
            Default: "Country,Region,City,PostalCode,Latitude,Longitude,MetroCode,AreaCode,Isp,Owner,Error"
      -->
            <setting name="MaxMind.Format"
                     value="Country,Region,City,PostalCode,Latitude,Longitude,MetroCode,AreaCode,Isp,Owner,Error" />

            <!--  MAXMIND SECURITY TOKEN
            Security token from MaxMind.
            Default: "00000000"
      -->
            <setting name="MaxMind.SecurityToken" value="00000000" />

            <!--  MAXMIND URL
            The URL of the MaxMind web service.
            Default: http://sitecore1.maxmind.com/app/sc?i={0}&amp;l={1}
      -->
            <setting name="MaxMind.Url" value="http://sitecore1.maxmind.com/app/sc?i={0}&amp;l={1}" />

            <!--  WEBEDIT PAGE DAILY VISITS CACHE EXPIRATION
            Sets the absolute expiration on the cached daily visits data in Page Editor.
            Makes sense only when analytics is enabled.            
            Default value: 1.00:00:00 (1 day)
      -->
            <setting name="WebEdit.PageDailyVisitsCacheExpiration" value="1.00:00:00" />

            <!--  WEBEDIT TEST STATISTICS CACHE EXPIRATION
              Sets the absolute expiration on the cached test statistics data in Page Editor.
              Makes sense only when analytics is enabled.            
              Default value: 01:00:00 (1 hour)
      -->
            <setting name="WebEdit.TestStatisticsCacheExpiration" value="01:00:00" />

            <!--  ANALYTICS ITEMRECORDS ID CACHE SIZE
              Sets the size of the cache, which stores analytics definition IDs by name.
              Default value: 10MB
      -->
            <setting name="Analytics.ItemRecordsIDCache.Size" value="10MB" />
        </settings>

        <behaviorProfileConverter type="Sitecore.Analytics.Data.BehaviorProfileConverter, Sitecore.Analytics"
                                  singleInstance="false" />

        <commands>
            <command name="analytics:opengoals"
                     type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenGoals,Sitecore.Xdb.Tracking.Client" />
            <command name="analytics:opentrackingfield"
                     type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenTrackingField,Sitecore.Xdb.Tracking.Client" />
            <command name="analytics:viewtrackingdetails"
                     type="Sitecore.Shell.Applications.Analytics.TrackingField.ViewTrackingDetails,Sitecore.Xdb.Tracking.Client" />
            <command name="device:settestdetails"
                     type="Sitecore.Analytics.Shell.Applications.Layouts.DeviceSetTestDetails, Sitecore.Analytics" />
            <command name="item:personalizeprofile"
                     type="Sitecore.Shell.Applications.Analytics.TrackingField.SetProfileValue,Sitecore.Xdb.Tracking.Client" />
        </commands>

        <contactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true" />

        <dataAdapterManager defaultProvider="xconnect">
            <providers>
                <clear/>
                <add name="xconnect" type="Sitecore.Analytics.XConnect.DataAccess.XConnectDataAdapterProvider, Sitecore.Analytics.XConnect">
                    <facets hint="raw:AddFacet">
                        <!-- Removing some of the default facets (Classification, EngagementMeasures, etc.) can cause issues, because there is code depending on them. -->
                        <facet facetKey="Classification"/>
                        <facet facetKey="EngagementMeasures"/>
                        <facet facetKey="ContactBehaviorProfile"/>
                        <facet facetKey="Personal"/>
                        <facet facetKey="KeyBehaviorCache"/>
                        <facet facetKey="ListSubscriptions"/>
                    </facets>
                    <GetOperationTimeout>0.00:00:05</GetOperationTimeout>
                </add>
            </providers>
        </dataAdapterManager>

        <events>
            <event name="item:saved">
                <handler type="Sitecore.Analytics.Data.ItemEventHandler, Sitecore.Analytics" method="OnItemSaved" />
            </event>

            <event name="media:request">
                <handler type="Sitecore.Analytics.Media.MediaRequestEventHandler, Sitecore.Analytics" method="OnMediaRequest" />
            </event>

            <event name="publish:end">
                <handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" />
            </event>
            
            <event name="publish:end:remote">
                <handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" />
            </event>
        </events>

        <geoIpManager defaultProvider="default">
            <providers>
                <clear />

                <!--  SALT 
              Salt attribute - a string that is added to the IP address when it is hashed.
              For security reasons, we recommended that the salt contains at least 6 characters.
        -->
                <add name="default" salt="f54RYb4RT4ylUn" type="Sitecore.Analytics.Lookups.IpHashProvider, Sitecore.Analytics" />
            </providers>
        </geoIpManager>

        <hooks>
            <hook type="Sitecore.Analytics.ConfigLoader, Sitecore.Analytics" />
            <hook type="Sitecore.Analytics.BackgroundServiceLoader, Sitecore.Analytics" />
        </hooks>

        <lookupManager defaultProvider="default">
            <providers>
                <clear />
                <add name="default" type="Sitecore.Analytics.Lookups.MaxMindProvider,Sitecore.Analytics" />
            </providers>
        </lookupManager>

        <pipelines>
            <classificationStrategy>
                <processor
                  type="Sitecore.Analytics.Pipelines.ClassificationStrategy.OverrideClassification, Sitecore.Analytics" />
                <processor
                  type="Sitecore.Analytics.Pipelines.ClassificationStrategy.ContactClassifications, Sitecore.Analytics" />
            </classificationStrategy>

            <commitSession>
            </commitSession>

            <convertFromXConnectContact>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertFromXConnectContactPipeline.ConvertFromXConnectContactProcessor, Sitecore.Analytics.XConnect"/>
            </convertFromXConnectContact>

            <convertToXConnectInteraction>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectInteractionPipeline.ConvertToXConnectInteractionProcessor, Sitecore.Analytics.XConnect"/>
            </convertToXConnectInteraction>

            <convertToXConnectEvent>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageDataToPageViewEvent, Sitecore.Analytics.XConnect"/>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertOutcomeDataToOutcome, Sitecore.Analytics.XConnect"/>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToCampaignEvent, Sitecore.Analytics.XConnect"/>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToDownloadEvent, Sitecore.Analytics.XConnect"/>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToSearchEvent, Sitecore.Analytics.XConnect"/>
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToGoal, Sitecore.Analytics.XConnect"/>
                <!--
        Ensure this processor is the last in the pipeline, because this processor converts page event data to default XConnect Event object.
        -->
                <processor type="Sitecore.Analytics.XConnect.DataAccess.Pipelines.ConvertToXConnectEventPipeline.ConvertPageEventDataToEvent, Sitecore.Analytics.XConnect"/>
            </convertToXConnectEvent>

            <createItemChangeTest>
                <processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.PageVersionTest,Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.MvTest,Sitecore.Analytics" />
            </createItemChangeTest>

            <createTracker>
                <processor type="Sitecore.Analytics.Pipelines.CreateTracker.GetTracker, Sitecore.Analytics" />
            </createTracker>

            <createVisit>
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.InitializeWithRequestData, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.XForwardedFor, Sitecore.Analytics">
                    <HeaderIpIndex>0</HeaderIpIndex>
                </processor>
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.UpdateGeoIpData, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.ParseReferrer, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.ParseSelfReferrer, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.SetTrafficType, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.CreateVisits.InitializeProfile, Sitecore.Analytics" />
            </createVisit>

            <endAnalytics>
                <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.CheckPreconditions, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.SetRobotSessionTimeOut, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.NormalizeVisit, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.SaveDuration, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.EndTracking, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EndAnalytics.ReleaseContact, Sitecore.Analytics"
                           runIfAborted="true" />
            </endAnalytics>

            <ensureClassification>
                <processor type="Sitecore.Analytics.Pipelines.EnsureClassification.CheckPreconditions, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EnsureClassification.UpdateGeoIpData, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EnsureClassification.EnsureClassification, Sitecore.Analytics" />
                <processor
                  type="Sitecore.Analytics.Pipelines.EnsureClassification.UpdateContactClassification, Sitecore.Analytics" />
            </ensureClassification>

            <ensureSessionContext>
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CheckPreconditions, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureContext, Sitecore.Analytics">
                    <SessionContextManager ref="tracking/sessionContextManager"></SessionContextManager>
                </processor>
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureDevice, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.EnsureContactId, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.LoadContact, Sitecore.Analytics">
                    <ContactManager ref="tracking/contactManager" />
                </processor>
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.CreateContact, Sitecore.Analytics">
                    <ContactManager ref="tracking/contactManager" />
                </processor>
                <processor type="Sitecore.Analytics.Pipelines.EnsureSessionContext.SetDummySession, Sitecore.Analytics">
                    <MaxPageIndexThreshold>50</MaxPageIndexThreshold>
                </processor>

            </ensureSessionContext>

            <excludeRobots>
                <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.TryObtainCachedResult, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckUserAgent, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.CheckIpAddress, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.ExcludeRobots.AddResultToCache, Sitecore.Analytics" />
            </excludeRobots>

            <findVisitorEmailAddress>
                <processor
                  type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics"
                  method="FindEmailInUserName"
                  patch:before="processor[@type='Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel']" />
                <processor
                  type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics"
                  method="FindEmailInTags"
                  patch:after="processor[@type='Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel']" />
            </findVisitorEmailAddress>

            <getContentEditorWarnings>
                <processor
                  type="Sitecore.Analytics.Pipelines.GetContentEditorWarnings.MissingMarketingProfiles, Sitecore.Analytics" />
            </getContentEditorWarnings>

            <getDictionaryDataStorage>
                <processor type="Sitecore.Analytics.DataAccess.Pipelines.GetDictionaryDataStorage.GetDictionaryDataProcessor, Sitecore.Analytics.DataAccess">
                    <DictionaryData type="Sitecore.Analytics.DataAccess.Dictionaries.DataStorage.ReferenceDataClientDictionary, Sitecore.Analytics.DataAccess" resolve="true"/>
                    <FallbackDictionaryData
                      type="Sitecore.Analytics.Data.Dictionaries.DictionaryData.Session.SessionDictionaryData, Sitecore.Analytics"
                      singleInstance="true">
                        <param desc="configuration" ref="tracking/sharedSessionState/config" />
                    </FallbackDictionaryData>
                </processor>
            </getDictionaryDataStorage>

            <getItemPersonalizationVisibility>
                <processor
                  type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckUserSettings, Sitecore.Analytics" />
                <processor
                  type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckSectionAvailability, Sitecore.Analytics" />
            </getItemPersonalizationVisibility>

            <getRenderingRules>
                <processor type="Sitecore.Analytics.Pipelines.GetRenderingRules.FromRendering, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.GetRenderingRules.FilterForEditing, Sitecore.Analytics" />
            </getRenderingRules>

            <handlePageError>
                <processor type="Sitecore.Analytics.Pipelines.HandlePageError.RegisterPageErrorProcessor, Sitecore.Analytics" />
            </handlePageError>

            <handlePageNotFound>
                <processor
                  type="Sitecore.Analytics.Pipelines.HandlePageNotFound.RegisterPageNotFoundProcessor, Sitecore.Analytics" />
            </handlePageNotFound>

            <httpRequestBegin>
                <processor type="Sitecore.Analytics.Pipelines.HttpRequest.StartDiagnostics,Sitecore.Analytics"
                           patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.StartMeasurements, Sitecore.Kernel']" />
            </httpRequestBegin>

            <httpRequestEnd>
                <processor type="Sitecore.Analytics.Pipelines.HttpRequest.EndAnalytics, Sitecore.Analytics"
                           patch:before="processor[@type='Sitecore.Pipelines.PreprocessRequest.CheckIgnoreFlag, Sitecore.Kernel']" />
            </httpRequestEnd>

            <httpRequestProcessed>
                <processor type="Sitecore.Analytics.Pipelines.HttpRequest.EndAnalytics, Sitecore.Analytics" />
            </httpRequestProcessed>

            <initialize>
                <processor type="Sitecore.Analytics.DataAccess.Pipelines.Loader.InitializePerformanceCounters, Sitecore.Analytics.DataAccess" />
                <processor type="Sitecore.Analytics.Pipelines.Loader.InitializeTracking, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.Loader.StartThreadPoolSizeMonitor, Sitecore.Analytics" />
            </initialize>

            <initializeInteractionProfile>
                <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ResetProfiles, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.CopyProfiles, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ApplyDecay, Sitecore.Analytics" resolve="true" />
            </initializeInteractionProfile>

            <initializeKnownDataDictionaries>
                <processor type="Sitecore.Analytics.DataAccess.Pipelines.InitializeKnownDataDictionaries.InitializeKnownDataDictionariesProcessor, Sitecore.Analytics.DataAccess"/>
            </initializeKnownDataDictionaries>

            <initializeTracker>
                <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.IsMediaRequest, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.CreateVisit, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.CreatePage, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.EnsureNextPageData, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.Robots, Sitecore.Analytics" />
                <processor
                  type="Sitecore.Analytics.Pipelines.InitializeTracker.EnsureContactClassification, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.InitializeTracker.RunRules, Sitecore.Analytics" />
            </initializeTracker>

            <insertRenderings>
                <processor type="Sitecore.Analytics.Pipelines.InsertRenderings.Personalization, Sitecore.Analytics"
                           patch:after="processor[@type='Sitecore.Pipelines.InsertRenderings.Processors.EvaluateConditions, Sitecore.Kernel']" />
            </insertRenderings>

            <mergeContacts>
                <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContacts, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactsClassification, Sitecore.Analytics" />
            </mergeContacts>

            <parseReferrer>
                <processor type="Sitecore.Analytics.Pipelines.ParseReferrer.ParseGenericSearchEngine,Sitecore.Analytics">
                    <engines hint="raw:AddHostParameterName">
                        <engine hostname="www.google" parametername="q" />
                        <engine hostname="search.yahoo" parametername="p" />
                        <engine hostname="www.bing" parametername="q" />
                        <engine hostname="search.lycos" parametername="query" />
                        <engine hostname="www.baidu" parametername="wd" />
                    </engines>
                </processor>
            </parseReferrer>

            <processItem>
                <processor type="Sitecore.Analytics.Pipelines.ProcessItem.CollectParameters,Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.ProcessItem.TriggerCampaigns,Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.ProcessItem.RegisterPageEvents,Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.ProcessItem.ProcessProfiles, Sitecore.Analytics" />
            </processItem>

            <registerOutcome>
            </registerOutcome>

            <registerPageEvent>
                <processor type="Sitecore.Analytics.Pipelines.RegisterPageEvent.RunPageEventRules, Sitecore.Analytics" />
            </registerPageEvent>

            <renderContentEditorHeader>
                <processor
                  type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddProfileCards, Sitecore.Xdb.Tracking.Client"
                  patch:after="processor[@type='Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddTitle, Sitecore.Client']" />
            </renderContentEditorHeader>

            <renderingRuleEvaluated>
            </renderingRuleEvaluated>

            <renderLayout>
                <processor type="Sitecore.Analytics.Pipelines.HttpRequest.StartAnalytics, Sitecore.Analytics"
                           patch:after="processor[@type='Sitecore.Pipelines.RenderLayout.SecurityCheck, Sitecore.Kernel']" />
            </renderLayout>

            <sessionEnd>
                <processor type="Sitecore.Analytics.Pipelines.SessionEnd.InitializeTracker, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.SessionEnd.RaiseVisitEnd, Sitecore.Analytics" />
            </sessionEnd>

            <startAnalytics>
                <processor type="Sitecore.Analytics.Pipelines.StartAnalytics.CheckPreconditions, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartAnalytics.CreateTracker, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartAnalytics.StartTracking, Sitecore.Analytics" />
            </startAnalytics>

            <startTracking>
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.RaiseStartTracking, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.InitializeTracker, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.TrackerInitialized, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.UpdateGeoIpData, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringCampaign, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringPageEvent, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessQueryStringTriggers, Sitecore.Analytics">
                    <triggers hint="raw:AddTrigger">
                        <trigger querystring="sc_rss" eventname="RSS" />
                    </triggers>
                </processor>
                <processor type="Sitecore.Analytics.Pipelines.StartTracking.ProcessItem, Sitecore.Analytics" />
            </startTracking>

            <submitSessionContext>
            </submitSessionContext>

            <trafficTypes>
                <processor type="Sitecore.Analytics.Pipelines.TrafficTypes.Initialize,Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.TrafficTypes.SearchKeywords,Sitecore.Analytics" />
            </trafficTypes>

            <transferSession>
                <processor
                  type="Sitecore.Analytics.Pipelines.TransferSession.TransferSessionToDifferentCluster, Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.TransferSession.RedirectCurrentSession, Sitecore.Analytics" />
            </transferSession>

            <triggerCampaign>
                <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.CheckPreconditions,Sitecore.Analytics" />
                <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.RegisterPageEvent,Sitecore.Analytics" />
            </triggerCampaign>

            <visitEnd>
                <processor type="Sitecore.Analytics.Pipelines.VisitEnd.RunRules,Sitecore.Analytics" />
            </visitEnd>
        </pipelines>

        <submitQueue>
            <queue type="Sitecore.Analytics.Data.DataAccess.SubmitQueue.FileSubmitQueue, Sitecore.Analytics"
                   singleInstance="true">
                <param desc="folderPath">$(dataFolder)/Submit Queue</param>
            </queue>
        </submitQueue>

        <tracking>
            <sessionContextManager type="Sitecore.Analytics.Data.HttpSessionContextManager, Sitecore.Analytics"
                                   singleInstance="true" />

            <contactManager type="Sitecore.Analytics.Tracking.ContactManager, Sitecore.Analytics" singleInstance="true">
                <param desc="sharedSessionStateManager" ref="tracking/sharedSessionState/manager" />

                <!-- The default contact repository is a stub that prevents the contact manager from reading and writing to the collection database.
             This behavior is overridden by the Sitecore.Analytics.Tracking.Database.config file.
        -->
                <param desc="contactRepository" ref="tracking/nullContactRepository" />
            </contactManager>

            <nullContactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true">
                <param desc="dataAdapterProvider" type="Sitecore.Analytics.DataAccess.Null.NullDataAdapterProvider" />
            </nullContactRepository>

            <sharedSessionState defaultProvider="InProc">
                <providers>
                    <clear />
                    <add name="InProc" type="System.Web.SessionState.InProcSessionStateStore" />
                </providers>

                <manager type="Sitecore.Analytics.Tracking.SharedSessionState.SharedSessionStateManager, Sitecore.Analytics">
                    <param desc="configuration" ref="tracking/sharedSessionState/config" />
                </manager>

                <config type="Sitecore.Analytics.Tracking.SharedSessionState.SharedSessionStateConfig, Sitecore.Analytics">
                    <param desc="maxLockAge">5000</param>
                    <!-- If an item in session state is already locked, this parameter is the time in milliseconds that the system is idle before making another attempt to apply a lock. -->
                    <param desc="timeoutBetweenLockAttempts">10</param>
                </config>
            </sharedSessionState>

            <untrackedPages>
            </untrackedPages>
        </tracking>

        <services>
            <configurator type= "Sitecore.Analytics.TrackingServicesConfigurator, Sitecore.Analytics" />
        </services>
    </sitecore>
</configuration>