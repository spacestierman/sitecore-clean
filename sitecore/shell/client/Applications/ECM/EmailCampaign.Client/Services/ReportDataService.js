define([    'backbone',    '/-/speak/v1/ecm/ReportDataModel.js',    '/-/speak/v1/ecm/DateHelper.js',    '/-/speak/v1/ecm/settings.js',    '/-/speak/v1/ecm/constants.js'], function (    backbone,    ReportDataModel,    DateHelper,    settings,    constants    ) {
    var ReportDataCollection = backbone.Collection.extend({
        model: ReportDataModel
    }),    ReportDataService = backbone.Model.extend({
        defaults: {
            managerRootId: '',
            messageId: '',            dateFrom: null,            dateTo: null
        },        initialize: function () {
            this.dataSources = new ReportDataCollection([]);            this.attachHandlers();            this.set('totals', this.calculateTotals('byMessage'));        },        calculateTotals: function (dataSourceName) {            var dataSource = this.getDataSource(dataSourceName),                eventVisits = this.calculateEventVisits(dataSource),                uniques = this.calculateUniques(dataSource),                totals = {};            _.extend(totals, eventVisits, uniques);            totals['pageBounce'] = dataSource.total(function (fact) {
                return fact.event === constants.Reporting.Events.CLICK ? fact.bounces : 0;
            });            totals['productive'] = dataSource.total(function (fact) {
                return fact.isProductive ? fact.visits : 0;
            });            totals['browsed'] = dataSource.total(function (fact) {                return fact.isBrowsed ? fact.visits : 0;            });            totals['failed'] = dataSource.total(function (fact) {                return fact.event === constants.Reporting.Events.FAILED ? fact.visits : 0;            });            totals['value'] = dataSource.total(function (fact) {
                return fact.value;
            });            return totals;        },        calculateEventVisits: function (dataSource) {            var totalVisits = {};            _.each(constants.Reporting.Events,                function (eventCode, key) {                    totalVisits[key.toLowerCase()] = dataSource.total(function (fact) {                        return fact.event === eventCode ? fact.visits : 0;                    });                });            return totalVisits;        },        calculateUniques: function (dataSource) {            var uniques = {};            _.each(constants.Reporting.Events,                function (eventCode, key) {                    var keyText = key.toLowerCase(),                        uniqueKey = 'unique' + keyText.charAt(0).toUpperCase() + keyText.slice(1);
                    uniques[uniqueKey] = dataSource.total(function (fact) {
                        return fact.event === eventCode ? fact.count : 0;
                    });
                });            return uniques;        },        attachHandlers: function () {
            var debouncedUpdateDataSourceParams = _.debounce(this.updateDataSourceParameters, 50);            this.on({                'change:messageId': debouncedUpdateDataSourceParams,                'change:managerRootId': debouncedUpdateDataSourceParams,                'change:dateFrom': debouncedUpdateDataSourceParams,                'change:dateTo': debouncedUpdateDataSourceParams            });            this.getDataSource('byMessage').on('filtered filter:updated', function() {                this.set('totals', this.calculateTotals('byMessage'));            }, this);        },        getGlobalParams: function (modifier) {            var dateRange = modifier === 'previousPeriod' ? this.getPreviousDateRange() : this.getDateRange();            return _.extend({}, dateRange, {                    managerRootId: this.get('managerRootId'),                    messageId: this.get('messageId')                });        },        getDateRange: function() {            return {                dateFrom: this.get('dateFrom'),                dateTo: this.get('dateTo')            }        },                getPreviousDateRange: function () {            var dateRange = this.getDateRange(),                prevPeriodTo = null,                prevPeriodFrom = null;            if (dateRange.dateFrom && dateRange.dateTo) {                prevPeriodTo = new Date();                prevPeriodFrom = new Date();                prevPeriodTo.setTime(dateRange.dateFrom.getTime());                DateHelper.subtractDays(prevPeriodTo, 1);                prevPeriodFrom.setTime(prevPeriodTo.getTime());                DateHelper.subtractDays(prevPeriodFrom, DateHelper.daysBetween(dateRange.dateFrom, dateRange.dateTo));            }                        return {                dateFrom: prevPeriodFrom,                dateTo: prevPeriodTo            }        },        updateDataSourceParameters: function () {             this.dataSources.each(function (dataSource) {                var config = this.parseName(dataSource.get('name'));                dataSource.set(this.getGlobalParams(config.modifier));            }, this);        },        parseName: function(name) {            var splitted = name.split(':');            return {                name: splitted[0],                modifier: splitted[1]            };        },                getDataSource: function (dataSourceName) {            var config = this.parseName(dataSourceName),                existing = this.dataSources.get(dataSourceName);            if (existing) {
                return existing;
            }            var dataSourceConfig = _.extend({ name: dataSourceName }, settings.ReportDataConfig[config.name] || {}, this.getGlobalParams(config.modifier));            this.dataSources.add(dataSourceConfig);            return this.dataSources.get(dataSourceName);
        }
    });    return new ReportDataService();
});
